[{"D:\\Workspace\\Chat-Application\\client\\src\\index.js":"1","D:\\Workspace\\Chat-Application\\client\\src\\reportWebVitals.js":"2","D:\\Workspace\\Chat-Application\\client\\src\\App.js":"3","D:\\Workspace\\Chat-Application\\client\\src\\component\\Messenger.jsx":"4","D:\\Workspace\\Chat-Application\\client\\src\\component\\account\\Login.jsx":"5","D:\\Workspace\\Chat-Application\\client\\src\\component\\ChatBox.jsx":"6","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Menu.jsx":"7","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Header.jsx":"8","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Conversations.jsx":"9","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\HeaderMenu.jsx":"10","D:\\Workspace\\Chat-Application\\client\\src\\constant\\data.js":"11","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Search.jsx":"12","D:\\Workspace\\Chat-Application\\client\\src\\component\\drawer\\InfoDrawer.jsx":"13","D:\\Workspace\\Chat-Application\\client\\src\\context\\AccountProvider.jsx":"14","D:\\Workspace\\Chat-Application\\client\\src\\theme\\TemplateProvider.jsx":"15","D:\\Workspace\\Chat-Application\\client\\src\\component\\drawer\\Profile.jsx":"16","D:\\Workspace\\Chat-Application\\client\\src\\service\\api.js":"17","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Conversation.jsx":"18","D:\\Workspace\\Chat-Application\\client\\src\\context\\UserProvider.jsx":"19","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\Chat.jsx":"20","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\Messages.jsx":"21","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\ChatHeader.jsx":"22","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\ChatFooter.jsx":"23","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\Message.jsx":"24","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\EmptyChat.jsx":"25"},{"size":500,"mtime":1633057663735,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":453,"mtime":1633431268167,"results":"29","hashOfConfig":"27"},{"size":1169,"mtime":1633534711000,"results":"30","hashOfConfig":"27"},{"size":2700,"mtime":1633534343307,"results":"31","hashOfConfig":"27"},{"size":1360,"mtime":1633515320272,"results":"32","hashOfConfig":"27"},{"size":370,"mtime":1633428099759,"results":"33","hashOfConfig":"27"},{"size":1442,"mtime":1633321769001,"results":"34","hashOfConfig":"27"},{"size":1291,"mtime":1633535228610,"results":"35","hashOfConfig":"27"},{"size":2214,"mtime":1633567122659,"results":"36","hashOfConfig":"27"},{"size":104,"mtime":1633235349433,"results":"37","hashOfConfig":"27"},{"size":1495,"mtime":1633428084057,"results":"38","hashOfConfig":"27"},{"size":926,"mtime":1633573550185,"results":"39","hashOfConfig":"27"},{"size":891,"mtime":1633537945373,"results":"40","hashOfConfig":"27"},{"size":875,"mtime":1633357489039,"results":"41","hashOfConfig":"27"},{"size":1726,"mtime":1633573623515,"results":"42","hashOfConfig":"27"},{"size":1322,"mtime":1633568552624,"results":"43","hashOfConfig":"27"},{"size":2325,"mtime":1633588428385,"results":"44","hashOfConfig":"27"},{"size":390,"mtime":1633431425335,"results":"45","hashOfConfig":"27"},{"size":984,"mtime":1633538173496,"results":"46","hashOfConfig":"27"},{"size":4411,"mtime":1633569427285,"results":"47","hashOfConfig":"27"},{"size":1619,"mtime":1633532815639,"results":"48","hashOfConfig":"27"},{"size":1485,"mtime":1633520779808,"results":"49","hashOfConfig":"27"},{"size":1460,"mtime":1633567191152,"results":"50","hashOfConfig":"27"},{"size":610,"mtime":1633517358391,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"7oe2as",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\Workspace\\Chat-Application\\client\\src\\index.js",[],["111","112"],"D:\\Workspace\\Chat-Application\\client\\src\\reportWebVitals.js",[],"D:\\Workspace\\Chat-Application\\client\\src\\App.js",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\Messenger.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\account\\Login.jsx",["113","114","115","116","117"],"import {\r\n  Dialog,\r\n  withStyles,\r\n  Box,\r\n  Typography,\r\n  makeStyles,\r\n  List,\r\n  ListItem,\r\n} from \"@material-ui/core\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport { useContext, useState } from \"react\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { clientId } from \"../../constant/data\";\r\nimport { addUser } from \"../../service/api\";\r\nimport LogoRabbit from \"../../img/LogoRabbit.png\";\r\n\r\n//Code\r\nconst useStyles = makeStyles({\r\n  component: { paddingLeft: 150, height: \"80%\" },\r\n  lefComponent: {\r\n    paddingLeft: 256,\r\n  },\r\n  qrCode: {\r\n    height: 264,\r\n    width: 264,\r\n    padding: \"50px 50px 20px 100px\",\r\n  },\r\n  title: {\r\n    fontSize: 28,\r\n    marginLeft: 50,\r\n    fontFamily:\r\n      \"Segoe UI, Helvetica Neue, Lucida Grande, Arial, Ubuntu, Cantarell, Fira Code\",\r\n    fontWeight: 300,\r\n    alignItems: \"center\",\r\n    paddingBottom: \"20px\",\r\n  },\r\n  list: {\r\n    \"& > *\": {\r\n      fontSize: 18,\r\n      padding: 0,\r\n      marginBottom: 15,\r\n      lineHeight: \"28px\",\r\n      color: \"#4a4a4a\",\r\n    },\r\n  },\r\n  login: {\r\n    boxShadow: \"none\",\r\n    border: \"1px solid rgba(3, 6, 7, 0.14)\",\r\n  },\r\n});\r\n\r\nconst style = {\r\n  dialogPaper: {\r\n    height: \"70%\",\r\n    width: \"100%\",\r\n    marginTop: \"2%\",\r\n    boxShadow: \"none\",\r\n    borderRadius: 20,\r\n    // maxHeight: \"100%\",\r\n    maxWidth: \"48%\",\r\n  },\r\n};\r\n\r\nconst Login = ({ classes }) => {\r\n  const classname = useStyles();\r\n\r\n  const { account, setAccount } = useContext(AccountContext);\r\n\r\n  const loginSuccess = async (res) => {\r\n    console.log(\"Login SuccessFul!\", res.profileObj);\r\n    setAccount(res.profileObj);\r\n    addUser(res.profileObj);\r\n  };\r\n  const loginFailure = () => {\r\n    console.log(\"Login Failed!\");\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={true}\r\n      classes={{ paper: classes.dialogPaper }}\r\n      BackdropProps={{ style: { backgroundColor: \"unset\" } }}\r\n    >\r\n      <Box className={classname.component}>\r\n        <img src={LogoRabbit} className={classname.qrCode} />\r\n        <Typography className={classname.title}>\r\n          Chào mừng đến với Rabbit Talk\r\n        </Typography>\r\n        <Box style={{ position: \"relative\" }}>\r\n          <Box style={{ position: \"absolute\", left: \"21%\" }}>\r\n            <GoogleLogin\r\n              clientId={clientId}\r\n              buttonText=\"Đăng nhập bằng Google\"\r\n              isSignedIn={true}\r\n              onSuccess={loginSuccess}\r\n              onFailure={loginFailure}\r\n              cookiePolicy={\"single_host_origin\"}\r\n              className={classname.login}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(style)(Login);\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\ChatBox.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Menu.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Header.jsx",["118"],"import { useContext, useState } from \"react\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\nimport { Chat } from \"@material-ui/icons\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport HeaderMenu from \"./HeaderMenu\";\r\nimport Drawer from \"../drawer/InfoDrawer\";\r\n\r\nconst useStyles = makeStyles({\r\n  header: {\r\n    height: 35,\r\n    background: \"#ededed\",\r\n    padding: \"10px 16px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    height: 37,\r\n    width: 37,\r\n    borderRadius: \"50%\",\r\n  },\r\n  icons: {\r\n    marginLeft: \"auto\",\r\n    \"& > *\": {\r\n      marginLeft: 2,\r\n      padding: 8,\r\n      color: \"#919191\",\r\n    },\r\n    \"& :first-child\": {\r\n      fontSize: 22,\r\n      marginRight: 8,\r\n      marginTop: 3,\r\n    },\r\n  },\r\n});\r\n\r\nconst Header = () => {\r\n  const { account } = useContext(AccountContext);\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const toggleDrawer = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.header}>\r\n        <img\r\n          src={account.imageUrl}\r\n          onClick={() => toggleDrawer()}\r\n          alt=\"display picture\"\r\n          className={classes.avatar}\r\n        />\r\n        <Box className={classes.icons}>\r\n          <Chat />\r\n          <HeaderMenu />\r\n        </Box>\r\n      </Box>\r\n      <Drawer open={open} setOpen={setOpen} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Conversations.jsx",["119"],"import { useEffect, useState, useContext } from \"react\";\r\nimport { getUser } from \"../../service/api\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\n\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\n//component\r\nimport Conversation from \"./Conversation\";\r\n\r\nconst useStyles = makeStyles({\r\n  component: {\r\n    height: \"81vh\",\r\n    overflow: \"overlay\",\r\n  },\r\n});\r\n\r\nconst Conversations = ({ text }) => {\r\n  const classes = useStyles();\r\n\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const { account, socket, setActiveUsers } = useContext(AccountContext);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await getUser();\r\n      const filterData = data.filter((user) =>\r\n        user.name.toLowerCase().includes(text.toLowerCase())\r\n      );\r\n      setUsers(filterData);\r\n    };\r\n    fetchData();\r\n  }, [text]);\r\n\r\n  useEffect(() => {\r\n    socket.current.emit(\"addUser\", account.googleId);\r\n    socket.current.on(\"getUsers\", (users) => {\r\n      setActiveUsers(users);\r\n    });\r\n  }, [account]);\r\n\r\n  return (\r\n    <Box className={classes.component}>\r\n      {users.map(\r\n        (user) =>\r\n          user.googleId !== account.googleId && <Conversation user={user} />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Conversations;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\HeaderMenu.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\constant\\data.js",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Search.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\drawer\\InfoDrawer.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\context\\AccountProvider.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\theme\\TemplateProvider.jsx",["120"],"import React, { createContext, useContext } from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const TemplateContext = createContext(null);\r\n\r\nconst TemplateProvider = ({ children }) => {\r\n  const theme = createMuiTheme({\r\n    overrides: {\r\n      MuiDrawer: {\r\n        paperAnchorLeft: {\r\n          height: \"95%\",\r\n          top: 18,\r\n          width: 380,\r\n          left: 71,\r\n          borderRadius: 20,\r\n          boxShadow: \"none\",\r\n          borderTopRightRadius: 0,\r\n        },\r\n      },\r\n      MuiBackdrop: {\r\n        root: {\r\n          backgroundColor: \"unset\",\r\n        },\r\n      },\r\n    },\r\n  });\r\n  return (\r\n    <TemplateContext.Provider>\r\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\r\n    </TemplateContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TemplateProvider;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\drawer\\Profile.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\service\\api.js",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\menu\\Conversation.jsx",["121","122"],"import { Box, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { UserContext } from \"../../context/UserProvider\";\r\n\r\nimport { getConversation, setConversation } from \"../../service/api\";\r\nconst useStyles = makeStyles({\r\n  component: {\r\n    display: \"flex\",\r\n    height: 40,\r\n    padding: \"13px 0\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  displayPicture: {\r\n    width: 50,\r\n    height: 50,\r\n    borderRadius: \"50%\",\r\n    padding: \"0 14px\",\r\n  },\r\n  timestamp: {\r\n    fontSize: 12,\r\n    marginLeft: \"auto\",\r\n    marginRight: 20,\r\n    color: \"#000099\",\r\n  },\r\n  text: {\r\n    color: \"rgba(0,0,0,0.6)\",\r\n    fontSize: 13,\r\n  },\r\n});\r\n\r\nconst Conversation = ({ user }) => {\r\n  const url = user.imageUrl;\r\n  const classes = useStyles();\r\n\r\n  const { account, newMessageFlag } = useContext(AccountContext);\r\n  const { setPerson } = useContext(UserContext);\r\n\r\n  const [message, setMessage] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getConversationMessage = async () => {\r\n      const data = await getConversation({\r\n        sender: account.googleId,\r\n        receiver: user.googleId,\r\n      });\r\n      setMessage({ text: data.message, timestamp: data.updatedAt });\r\n    };\r\n    getConversationMessage();\r\n  }, [newMessageFlag]);\r\n\r\n  const setUser = async () => {\r\n    setPerson(user);\r\n    await setConversation({\r\n      senderId: account.googleId,\r\n      receiverId: user.googleId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.component} onClick={() => setUser()}>\r\n      <Box>\r\n        <img\r\n          src={url}\r\n          alt=\"display-picture\"\r\n          className={classes.displayPicture}\r\n        />\r\n      </Box>\r\n      <Box style={{ width: \"100%\" }}>\r\n        <Box style={{ display: \"flex\" }}>\r\n          <Typography>{user.name}</Typography>\r\n          {message.text && (\r\n            <Typography className={classes.timestamp}>\r\n              {new Date(message.timestamp).getHours()}:\r\n              {new Date(message.timestamp).getMinutes()}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        <Box>\r\n          <Typography className={classes.text}>{message.text}</Typography>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Conversation;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\context\\UserProvider.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\Chat.jsx",["123"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { UserContext } from \"../../context/UserProvider\";\r\nimport Messages from \"./Messages\";\r\nimport { getConversation } from \"../../service/api\";\r\n\r\nconst Chat = () => {\r\n  const { person } = useContext(UserContext);\r\n  const { account } = useContext(AccountContext);\r\n\r\n  const [conversation, setConversation] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getConversationDetails = async () => {\r\n      let data = await getConversation({\r\n        sender: account.googleId,\r\n        receiver: person.googleId,\r\n      });\r\n      setConversation(data);\r\n    };\r\n    getConversationDetails();\r\n  }, [person.googleId]);\r\n\r\n  return (\r\n    <Box>\r\n      <ChatHeader />\r\n      <Messages conversation={conversation} person={person} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\Messages.jsx",["124"],"import { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\nimport Vectezy from \"../../img/Vectezy.jpg\";\r\nimport Footer from \"./ChatFooter\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { newMessages, getMessages } from \"../../service/api\";\r\nimport Message from \"./Message\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    backgroundImage: `url(${Vectezy})`,\r\n    backgroundSize: \"100%\",\r\n  },\r\n  component: {\r\n    height: \"81vh\",\r\n    overflow: \"scroll\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  container: {\r\n    padding: \"1px 50px\",\r\n  },\r\n});\r\n\r\nconst Messages = ({ person, conversation }) => {\r\n  const classes = useStyles();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [incomingMessage, setIncomingMessage] = useState(null);\r\n  const [value, setValue] = useState();\r\n\r\n  const scrollRef = useRef();\r\n\r\n  const { account, socket, newMessageFlag, setNewMessageFlag } =\r\n    useContext(AccountContext);\r\n\r\n  useEffect(() => {\r\n    console.log(socket.current);\r\n    socket.current.on(\"getMessage\", (data) => {\r\n      setIncomingMessage({\r\n        sender: data.senderId,\r\n        text: data.text,\r\n        createdAt: Date.now(),\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ transition: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    incomingMessage &&\r\n      conversation?.members?.includes(incomingMessage.sender) &&\r\n      setMessages((prev) => [...prev, incomingMessage]);\r\n  }, [incomingMessage, conversation]);\r\n\r\n  useEffect(() => {\r\n    const getMessageDetails = async () => {\r\n      let res = await getMessages(conversation._id);\r\n\r\n      setMessages(res.data);\r\n    };\r\n    getMessageDetails();\r\n  }, [conversation?._id, person._id, newMessageFlag]);\r\n\r\n  const receiverId = conversation?.members?.find(\r\n    (member) => member !== account.googleId\r\n  );\r\n\r\n  const sendText = async (e) => {\r\n    let code = e.keyCode || e.which;\r\n    if (!value) return;\r\n\r\n    if (code === 13) {\r\n      let message = {\r\n        sender: account.googleId,\r\n        conversationId: conversation._id,\r\n        text: value,\r\n      };\r\n\r\n      socket.current.emit(\"sendMessage\", {\r\n        senderId: account.googleId,\r\n        receiverId,\r\n        text: value,\r\n      });\r\n\r\n      await newMessages(message);\r\n      setValue(\"\");\r\n      setNewMessageFlag((prev) => !prev);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   socket.current.on(\"getMessage\", (data) => {\r\n  //     setIncomingMessage({\r\n  //       sender: data.senderId,\r\n  //       text: data.text,\r\n  //       createdAt: Date.now(),\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const getMessageDetails = async () => {\r\n  //     let data = await getMessages(conversation._id);\r\n  //     setMessages(data);\r\n  //   };\r\n  //   getMessageDetails();\r\n  // }, [conversation?._id, person._id, newMessageFlag]);\r\n\r\n  // useEffect(() => {\r\n  //   scrollRef.current?.scrollIntoView({ transition: \"smooth\" });\r\n  // }, [messages]);\r\n\r\n  // useEffect(() => {\r\n  //   incomingMessage &&\r\n  //     conversation?.members?.includes(incomingMessage.sender) &&\r\n  //     setMessages((prev) => [...prev, incomingMessage]);\r\n  // }, [incomingMessage, conversation]);\r\n\r\n  // const receiverId = conversation?.members?.find(\r\n  //   (member) => member !== account.googleId\r\n  // );\r\n\r\n  // const sendText = async (e) => {\r\n  //   let code = e.keyCode || e.which;\r\n  //   if (!value) return;\r\n\r\n  //   if (code === 13) {\r\n  //     let message = {\r\n  //       sender: account.googleId,\r\n  //       conversationId: conversation._id,\r\n  //       text: value,\r\n  //     };\r\n\r\n  //     socket.current.emit(\"sendMessage\", {\r\n  //       senderId: account.googleId,\r\n  //       receiverId,\r\n  //       text: value,\r\n  //     });\r\n\r\n  //     await newMessages(message);\r\n\r\n  //     setValue(\"\");\r\n  //     setNewMessageFlag((prev) => !prev);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <Box className={classes.component}>\r\n        {messages &&\r\n          messages.map((message) => (\r\n            <Box className={classes.container} ref={scrollRef}>\r\n              <Message message={message} />\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n      <Footer sendText={sendText} value={value} setValue={setValue} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\ChatHeader.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\ChatFooter.jsx",[],"D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\Message.jsx",["125"],"import { Box, Typography, makeStyles } from \"@material-ui/core\";\r\nimport { useContext } from \"react\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    background: \"#FFFFFF\",\r\n    padding: 5,\r\n    maxWidth: \"60%\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n    width: \"fit-content\",\r\n    wordBreak: \"break-word\",\r\n  },\r\n  text: {\r\n    fontSize: 14,\r\n    padding: \"0 25px 0 5px\",\r\n  },\r\n  time: {\r\n    fontSize: 10,\r\n    marginTop: \"auto\",\r\n    marginTop: 6,\r\n    color: \"#919191\",\r\n    wordBreak: \"keep-all\",\r\n  },\r\n  own: {\r\n    background: \"#dcf8c6\",\r\n    padding: 5,\r\n    maxWidth: \"60%\",\r\n    display: \"flex\",\r\n    borderRadius: 10,\r\n    wordBreak: \"break-word\",\r\n    width: \"fit-content\",\r\n    marginLeft: \"auto\",\r\n  },\r\n});\r\n\r\nconst Message = ({ message }) => {\r\n  const classes = useStyles();\r\n\r\n  const { account } = useContext(AccountContext);\r\n\r\n  const formatDate = (date) => {\r\n    return date < 10 ? \"0\" + date : date;\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      className={\r\n        account.googleId === message.sender ? classes.own : classes.wrapper\r\n      }\r\n    >\r\n      <Typography className={classes.text}>{message.text}</Typography>\r\n      <Typography className={classes.time}>\r\n        {formatDate(new Date(message.createdAt).getHours())}:\r\n        {formatDate(new Date(message.createdAt).getMinutes())}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","D:\\Workspace\\Chat-Application\\client\\src\\component\\chat\\EmptyChat.jsx",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":7,"column":3,"nodeType":"132","messageId":"133","endLine":7,"endColumn":7},{"ruleId":"130","severity":1,"message":"134","line":8,"column":3,"nodeType":"132","messageId":"133","endLine":8,"endColumn":11},{"ruleId":"130","severity":1,"message":"135","line":11,"column":22,"nodeType":"132","messageId":"133","endLine":11,"endColumn":30},{"ruleId":"130","severity":1,"message":"136","line":67,"column":11,"nodeType":"132","messageId":"133","endLine":67,"endColumn":18},{"ruleId":"137","severity":1,"message":"138","line":85,"column":9,"nodeType":"139","endLine":85,"endColumn":62},{"ruleId":"140","severity":1,"message":"141","line":49,"column":9,"nodeType":"139","endLine":54,"endColumn":11},{"ruleId":"142","severity":1,"message":"143","line":39,"column":6,"nodeType":"144","endLine":39,"endColumn":15,"suggestions":"145"},{"ruleId":"130","severity":1,"message":"146","line":1,"column":32,"nodeType":"132","messageId":"133","endLine":1,"endColumn":42},{"ruleId":"142","severity":1,"message":"147","line":51,"column":6,"nodeType":"144","endLine":51,"endColumn":22,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"141","line":64,"column":9,"nodeType":"139","endLine":68,"endColumn":11},{"ruleId":"142","severity":1,"message":"149","line":24,"column":6,"nodeType":"144","endLine":24,"endColumn":23,"suggestions":"150"},{"ruleId":"142","severity":1,"message":"151","line":45,"column":6,"nodeType":"144","endLine":45,"endColumn":8,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":22,"column":5,"nodeType":"155","messageId":"156","endLine":22,"endColumn":14},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'ListItem' is defined but never used.","'useState' is defined but never used.","'account' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setActiveUsers' and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["159"],"'useContext' is defined but never used.","React Hook useEffect has missing dependencies: 'account.googleId' and 'user.googleId'. Either include them or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'account.googleId'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["162"],"no-dupe-keys","Duplicate key 'marginTop'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [account, setActiveUsers, socket]",{"range":"171","text":"172"},"Update the dependencies array to be: [account.googleId, newMessageFlag, user.googleId]",{"range":"173","text":"174"},"Update the dependencies array to be: [account.googleId, person.googleId]",{"range":"175","text":"176"},"Update the dependencies array to be: [socket]",{"range":"177","text":"178"},[1042,1051],"[account, setActiveUsers, socket]",[1338,1354],"[account.googleId, newMessageFlag, user.googleId]",[806,823],"[account.googleId, person.googleId]",[1259,1261],"[socket]"]