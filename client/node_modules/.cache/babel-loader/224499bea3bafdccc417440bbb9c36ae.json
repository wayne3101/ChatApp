{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\Chat-Application\\\\client\\\\src\\\\component\\\\chat\\\\Messages.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\";\nimport background from \"../../img/background.jpg\";\nimport Footer from \"./ChatFooter\";\nimport { AccountContext } from \"../../context/AccountProvider\";\nimport { newMessage, getMessages } from \"../../service/api\";\nimport Message from \"./Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  wrapper: {\n    backgroundImage: `url(${background})`,\n    backgroundSize: \"95%\"\n  },\n  component: {\n    height: \"81vh\"\n  }\n});\n\nconst Messages = ({\n  conversation\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [value, setValue] = useState();\n  const [messages, setMessages] = useState([]);\n  const {\n    account\n  } = useContext(AccountContext);\n  useEffect(() => {\n    const getMessageDetails = async () => {\n      let res = await getMessages(conversation._id);\n      setMessages(res.data);\n    };\n\n    getMessageDetails();\n  }, [conversation === null || conversation === void 0 ? void 0 : conversation._id]);\n\n  const sendText = async e => {\n    let code = e.keyCode || e.which;\n    if (!value) return;\n\n    if (code === 13) {\n      let message = {\n        sender: account.googleId,\n        conversationId: conversation._id,\n        text: value\n      };\n      await newMessage(message);\n      setValue(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.component,\n      children: messages && messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          message: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      sendText: sendText,\n      setValue: setValue,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"ueZp+ewupRiWNmIcokRPwnUlVKQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["D:/Workspace/Chat-Application/client/src/component/chat/Messages.jsx"],"names":["useContext","useState","useEffect","Box","makeStyles","background","Footer","AccountContext","newMessage","getMessages","Message","useStyles","wrapper","backgroundImage","backgroundSize","component","height","Messages","conversation","classes","value","setValue","messages","setMessages","account","getMessageDetails","res","_id","data","sendText","e","code","keyCode","which","message","sender","googleId","conversationId","text","map"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,mBAAhC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,mBAAxC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAC;AAC3BQ,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAG,OAAMR,UAAW,GAD5B;AAEPS,IAAAA,cAAc,EAAE;AAFT,GADkB;AAK3BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC;AALgB,CAAD,CAA5B;;AAUA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AAAA;;AACrC,QAAMC,OAAO,GAAGR,SAAS,EAAzB;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,EAAlC;AAEA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAEuB,IAAAA;AAAF,MAAcxB,UAAU,CAACO,cAAD,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,iBAAiB,GAAG,YAAY;AACpC,UAAIC,GAAG,GAAG,MAAMjB,WAAW,CAACS,YAAY,CAACS,GAAd,CAA3B;AAEAJ,MAAAA,WAAW,CAACG,GAAG,CAACE,IAAL,CAAX;AACD,KAJD;;AAKAH,IAAAA,iBAAiB;AAClB,GAPQ,EAON,CAACP,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAES,GAAf,CAPM,CAAT;;AASA,QAAME,QAAQ,GAAG,MAAOC,CAAP,IAAa;AAC5B,QAAIC,IAAI,GAAGD,CAAC,CAACE,OAAF,IAAaF,CAAC,CAACG,KAA1B;AACA,QAAI,CAACb,KAAL,EAAY;;AAEZ,QAAIW,IAAI,KAAK,EAAb,EAAiB;AACf,UAAIG,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAEX,OAAO,CAACY,QADJ;AAEZC,QAAAA,cAAc,EAAEnB,YAAY,CAACS,GAFjB;AAGZW,QAAAA,IAAI,EAAElB;AAHM,OAAd;AAMA,YAAMZ,UAAU,CAAC0B,OAAD,CAAhB;AACAb,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GAdD;;AAgBA,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACP,OAAxB;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEO,OAAO,CAACJ,SAAxB;AAAA,gBACGO,QAAQ,IACPA,QAAQ,CAACiB,GAAT,CAAcL,OAAD,iBACX,QAAC,GAAD;AAAA,+BACE,QAAC,OAAD;AAAS,UAAA,OAAO,EAAEZ;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEO,QAAlB;AAA4B,MAAA,QAAQ,EAAER,QAAtC;AAAgD,MAAA,KAAK,EAAED;AAAvD;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA/CD;;GAAMH,Q;UACYN,S;;;KADZM,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import { useContext, useState, useEffect } from \"react\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\nimport background from \"../../img/background.jpg\";\r\nimport Footer from \"./ChatFooter\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { newMessage, getMessages } from \"../../service/api\";\r\nimport Message from \"./Message\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    backgroundImage: `url(${background})`,\r\n    backgroundSize: \"95%\",\r\n  },\r\n  component: {\r\n    height: \"81vh\",\r\n  },\r\n});\r\n\r\nconst Messages = ({ conversation }) => {\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = useState();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const { account } = useContext(AccountContext);\r\n\r\n  useEffect(() => {\r\n    const getMessageDetails = async () => {\r\n      let res = await getMessages(conversation._id);\r\n\r\n      setMessages(res.data);\r\n    };\r\n    getMessageDetails();\r\n  }, [conversation?._id]);\r\n\r\n  const sendText = async (e) => {\r\n    let code = e.keyCode || e.which;\r\n    if (!value) return;\r\n\r\n    if (code === 13) {\r\n      let message = {\r\n        sender: account.googleId,\r\n        conversationId: conversation._id,\r\n        text: value,\r\n      };\r\n\r\n      await newMessage(message);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <Box className={classes.component}>\r\n        {messages &&\r\n          messages.map((message) => (\r\n            <Box>\r\n              <Message message={messages} />\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n      <Footer sendText={sendText} setValue={setValue} value={value} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}