{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\Chat-Application\\\\client\\\\src\\\\component\\\\chat\\\\Messages.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\";\nimport Vectezy from \"../../img/Vectezy.jpg\";\nimport Footer from \"./ChatFooter\";\nimport { AccountContext } from \"../../context/AccountProvider\";\nimport { newMessages, getMessages } from \"../../service/api\";\nimport Message from \"./Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  wrapper: {\n    backgroundImage: `url(${Vectezy})`,\n    backgroundSize: \"100%\"\n  },\n  component: {\n    height: \"81vh\",\n    overflow: \"scroll\",\n    overflowX: \"hidden\"\n  },\n  container: {\n    padding: \"1px 50px\"\n  }\n});\n\nconst Messages = ({\n  person,\n  conversation\n}) => {\n  _s();\n\n  var _conversation$member2;\n\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [incomingMessage, setIncomingMessage] = useState(null);\n  const [value, setValue] = useState();\n  const scrollRef = useRef();\n  const {\n    account,\n    socket,\n    newMessageFlag,\n    setNewMessageFlag\n  } = useContext(AccountContext);\n  useEffect(() => {\n    console.log(socket.current);\n    socket.current.on(\"getMessage\", data => {\n      setIncomingMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      transition: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    var _conversation$member;\n\n    incomingMessage && (conversation === null || conversation === void 0 ? void 0 : (_conversation$member = conversation.member) === null || _conversation$member === void 0 ? void 0 : _conversation$member.includes(incomingMessage.sender)) && setMessages(prev => [...prev, incomingMessage]);\n  }, [incomingMessage, conversation]);\n  useEffect(() => {\n    const getMessageDetails = async () => {\n      let res = await getMessages(conversation._id);\n      setMessages(res.data);\n    };\n\n    getMessageDetails();\n  }, [conversation === null || conversation === void 0 ? void 0 : conversation._id, person._id, newMessageFlag]);\n  const receiverId = conversation === null || conversation === void 0 ? void 0 : (_conversation$member2 = conversation.member) === null || _conversation$member2 === void 0 ? void 0 : _conversation$member2.find(member => member !== account.googleId);\n\n  const sendText = async e => {\n    let code = e.keyCode || e.which;\n    if (!value) return;\n\n    if (code === 13) {\n      let message = {\n        sender: account.googleId,\n        conversationId: conversation._id,\n        text: value\n      };\n      socket.current.emit(\"sendMessage\", {\n        senderId: account.googleId,\n        receiverId,\n        text: value\n      });\n      await newMessages(message);\n      setValue(\"\");\n      setNewMessageFlag(prev => !prev);\n    }\n  }; // useEffect(() => {\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setIncomingMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n  // useEffect(() => {\n  //   const getMessageDetails = async () => {\n  //     let data = await getMessages(conversation._id);\n  //     setMessages(data);\n  //   };\n  //   getMessageDetails();\n  // }, [conversation?._id, person._id, newMessageFlag]);\n  // useEffect(() => {\n  //   scrollRef.current?.scrollIntoView({ transition: \"smooth\" });\n  // }, [messages]);\n  // useEffect(() => {\n  //   incomingMessage &&\n  //     conversation?.members?.includes(incomingMessage.sender) &&\n  //     setMessages((prev) => [...prev, incomingMessage]);\n  // }, [incomingMessage, conversation]);\n  // const receiverId = conversation?.members?.find(\n  //   (member) => member !== account.googleId\n  // );\n  // const sendText = async (e) => {\n  //   let code = e.keyCode || e.which;\n  //   if (!value) return;\n  //   if (code === 13) {\n  //     let message = {\n  //       sender: account.googleId,\n  //       conversationId: conversation._id,\n  //       text: value,\n  //     };\n  //     socket.current.emit(\"sendMessage\", {\n  //       senderId: account.googleId,\n  //       receiverId,\n  //       text: value,\n  //     });\n  //     await newMessages(message);\n  //     setValue(\"\");\n  //     setNewMessageFlag((prev) => !prev);\n  //   }\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.component,\n      children: messages && messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.container,\n        ref: scrollRef,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          message: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      sendText: sendText,\n      value: value,\n      setValue: setValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"Z4/9javN+sfMGVuxmUxViY2+nGA=\", false, function () {\n  return [useStyles];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["D:/Workspace/Chat-Application/client/src/component/chat/Messages.jsx"],"names":["useContext","useState","useEffect","useRef","Box","makeStyles","Vectezy","Footer","AccountContext","newMessages","getMessages","Message","useStyles","wrapper","backgroundImage","backgroundSize","component","height","overflow","overflowX","container","padding","Messages","person","conversation","classes","messages","setMessages","incomingMessage","setIncomingMessage","value","setValue","scrollRef","account","socket","newMessageFlag","setNewMessageFlag","console","log","current","on","data","sender","senderId","text","createdAt","Date","now","scrollIntoView","transition","member","includes","prev","getMessageDetails","res","_id","receiverId","find","googleId","sendText","e","code","keyCode","which","message","conversationId","emit","map"],"mappings":"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","sourcesContent":["import { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\nimport Vectezy from \"../../img/Vectezy.jpg\";\r\nimport Footer from \"./ChatFooter\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { newMessages, getMessages } from \"../../service/api\";\r\nimport Message from \"./Message\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    backgroundImage: `url(${Vectezy})`,\r\n    backgroundSize: \"100%\",\r\n  },\r\n  component: {\r\n    height: \"81vh\",\r\n    overflow: \"scroll\",\r\n    overflowX: \"hidden\",\r\n  },\r\n  container: {\r\n    padding: \"1px 50px\",\r\n  },\r\n});\r\n\r\nconst Messages = ({ person, conversation }) => {\r\n  const classes = useStyles();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [incomingMessage, setIncomingMessage] = useState(null);\r\n  const [value, setValue] = useState();\r\n\r\n  const scrollRef = useRef();\r\n\r\n  const { account, socket, newMessageFlag, setNewMessageFlag } =\r\n    useContext(AccountContext);\r\n\r\n  useEffect(() => {\r\n    console.log(socket.current);\r\n    socket.current.on(\"getMessage\", (data) => {\r\n      setIncomingMessage({\r\n        sender: data.senderId,\r\n        text: data.text,\r\n        createdAt: Date.now(),\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ transition: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    incomingMessage &&\r\n      conversation?.member?.includes(incomingMessage.sender) &&\r\n      setMessages((prev) => [...prev, incomingMessage]);\r\n  }, [incomingMessage, conversation]);\r\n\r\n  useEffect(() => {\r\n    const getMessageDetails = async () => {\r\n      let res = await getMessages(conversation._id);\r\n\r\n      setMessages(res.data);\r\n    };\r\n    getMessageDetails();\r\n  }, [conversation?._id, person._id, newMessageFlag]);\r\n\r\n  const receiverId = conversation?.member?.find(\r\n    (member) => member !== account.googleId\r\n  );\r\n\r\n  const sendText = async (e) => {\r\n    let code = e.keyCode || e.which;\r\n    if (!value) return;\r\n\r\n    if (code === 13) {\r\n      let message = {\r\n        sender: account.googleId,\r\n        conversationId: conversation._id,\r\n        text: value,\r\n      };\r\n\r\n      socket.current.emit(\"sendMessage\", {\r\n        senderId: account.googleId,\r\n        receiverId,\r\n        text: value,\r\n      });\r\n\r\n      await newMessages(message);\r\n      setValue(\"\");\r\n      setNewMessageFlag((prev) => !prev);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   socket.current.on(\"getMessage\", (data) => {\r\n  //     setIncomingMessage({\r\n  //       sender: data.senderId,\r\n  //       text: data.text,\r\n  //       createdAt: Date.now(),\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const getMessageDetails = async () => {\r\n  //     let data = await getMessages(conversation._id);\r\n  //     setMessages(data);\r\n  //   };\r\n  //   getMessageDetails();\r\n  // }, [conversation?._id, person._id, newMessageFlag]);\r\n\r\n  // useEffect(() => {\r\n  //   scrollRef.current?.scrollIntoView({ transition: \"smooth\" });\r\n  // }, [messages]);\r\n\r\n  // useEffect(() => {\r\n  //   incomingMessage &&\r\n  //     conversation?.members?.includes(incomingMessage.sender) &&\r\n  //     setMessages((prev) => [...prev, incomingMessage]);\r\n  // }, [incomingMessage, conversation]);\r\n\r\n  // const receiverId = conversation?.members?.find(\r\n  //   (member) => member !== account.googleId\r\n  // );\r\n\r\n  // const sendText = async (e) => {\r\n  //   let code = e.keyCode || e.which;\r\n  //   if (!value) return;\r\n\r\n  //   if (code === 13) {\r\n  //     let message = {\r\n  //       sender: account.googleId,\r\n  //       conversationId: conversation._id,\r\n  //       text: value,\r\n  //     };\r\n\r\n  //     socket.current.emit(\"sendMessage\", {\r\n  //       senderId: account.googleId,\r\n  //       receiverId,\r\n  //       text: value,\r\n  //     });\r\n\r\n  //     await newMessages(message);\r\n\r\n  //     setValue(\"\");\r\n  //     setNewMessageFlag((prev) => !prev);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <Box className={classes.component}>\r\n        {messages &&\r\n          messages.map((message) => (\r\n            <Box className={classes.container} ref={scrollRef}>\r\n              <Message message={message} />\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n      <Footer sendText={sendText} value={value} setValue={setValue} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}