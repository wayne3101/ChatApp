{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\Chat-Application\\\\client\\\\src\\\\component\\\\chat\\\\Messages.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\";\nimport Vectezy from \"../../img/Vectezy.jpg\";\nimport Footer from \"./ChatFooter\";\nimport { AccountContext } from \"../../context/AccountProvider\";\nimport { newMessage, getMessages } from \"../../service/api\";\nimport Message from \"./Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  wrapper: {\n    backgroundImage: `url(${Vectezy})`,\n    backgroundSize: \"100%\"\n  },\n  component: {\n    height: \"81vh\"\n  },\n  container: {\n    padding: \"1px 50px\"\n  }\n});\n\nconst Messages = ({\n  conversation\n}) => {\n  _s();\n\n  var _conversation$member2;\n\n  const classes = useStyles();\n  const [value, setValue] = useState();\n  const [messages, setMessages] = useState([]);\n  const [incomingMessage, setIncomingMessage] = useState(null);\n  const {\n    account,\n    socket,\n    newMessageFlag,\n    setNewMessageFlag\n  } = useContext(AccountContext);\n  useEffect(() => {\n    socket.current.on(\"getMessage\", data => {\n      setIncomingMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    var _conversation$member;\n\n    incomingMessage && (conversation === null || conversation === void 0 ? void 0 : (_conversation$member = conversation.member) === null || _conversation$member === void 0 ? void 0 : _conversation$member.includes(incomingMessage.sender)) && setMessages(prev => [...prev, incomingMessage]);\n  }, [incomingMessage, conversation]);\n  useEffect(() => {\n    const getMessageDetails = async () => {\n      let res = await getMessages(conversation._id);\n      setMessages(res.data);\n    };\n\n    getMessageDetails();\n  }, [conversation === null || conversation === void 0 ? void 0 : conversation._id]);\n  const receiverId = conversation === null || conversation === void 0 ? void 0 : (_conversation$member2 = conversation.member) === null || _conversation$member2 === void 0 ? void 0 : _conversation$member2.find(member => member !== account.googleId);\n\n  const sendText = async e => {\n    let code = e.keyCode || e.which;\n    if (!value) return;\n\n    if (code === 13) {\n      let message = {\n        sender: account.googleId,\n        conversationId: conversation._id,\n        text: value\n      };\n      socket.current.emit(\"sendMessage\", {\n        senderId: account.googleId,\n        receiverId,\n        text: value\n      });\n      await newMessage(message);\n      setValue(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.component,\n      children: messages && messages.map(message => /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.container,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          message: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      sendText: sendText,\n      setValue: setValue,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"qxGTnl11M1fLrZU3x9nDu/4bn2o=\", false, function () {\n  return [useStyles];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["D:/Workspace/Chat-Application/client/src/component/chat/Messages.jsx"],"names":["useContext","useState","useEffect","Box","makeStyles","Vectezy","Footer","AccountContext","newMessage","getMessages","Message","useStyles","wrapper","backgroundImage","backgroundSize","component","height","container","padding","Messages","conversation","classes","value","setValue","messages","setMessages","incomingMessage","setIncomingMessage","account","socket","newMessageFlag","setNewMessageFlag","current","on","data","sender","senderId","text","createdAt","Date","now","member","includes","prev","getMessageDetails","res","_id","receiverId","find","googleId","sendText","e","code","keyCode","which","message","conversationId","emit","map"],"mappings":"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","sourcesContent":["import { useContext, useState, useEffect } from \"react\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\nimport Vectezy from \"../../img/Vectezy.jpg\";\r\nimport Footer from \"./ChatFooter\";\r\nimport { AccountContext } from \"../../context/AccountProvider\";\r\nimport { newMessage, getMessages } from \"../../service/api\";\r\nimport Message from \"./Message\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    backgroundImage: `url(${Vectezy})`,\r\n    backgroundSize: \"100%\",\r\n  },\r\n  component: {\r\n    height: \"81vh\",\r\n  },\r\n  container: {\r\n    padding: \"1px 50px\",\r\n  },\r\n});\r\n\r\nconst Messages = ({ conversation }) => {\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = useState();\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [incomingMessage, setIncomingMessage] = useState(null);\r\n\r\n  const { account, socket, newMessageFlag, setNewMessageFlag } =\r\n    useContext(AccountContext);\r\n\r\n  useEffect(() => {\r\n    socket.current.on(\"getMessage\", (data) => {\r\n      setIncomingMessage({\r\n        sender: data.senderId,\r\n        text: data.text,\r\n        createdAt: Date.now(),\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    incomingMessage &&\r\n      conversation?.member?.includes(incomingMessage.sender) &&\r\n      setMessages((prev) => [...prev, incomingMessage]);\r\n  }, [incomingMessage, conversation]);\r\n\r\n  useEffect(() => {\r\n    const getMessageDetails = async () => {\r\n      let res = await getMessages(conversation._id);\r\n\r\n      setMessages(res.data);\r\n    };\r\n    getMessageDetails();\r\n  }, [conversation?._id]);\r\n\r\n  const receiverId = conversation?.member?.find(\r\n    (member) => member !== account.googleId\r\n  );\r\n\r\n  const sendText = async (e) => {\r\n    let code = e.keyCode || e.which;\r\n    if (!value) return;\r\n\r\n    if (code === 13) {\r\n      let message = {\r\n        sender: account.googleId,\r\n        conversationId: conversation._id,\r\n        text: value,\r\n      };\r\n\r\n      socket.current.emit(\"sendMessage\", {\r\n        senderId: account.googleId,\r\n        receiverId,\r\n        text: value,\r\n      });\r\n\r\n      await newMessage(message);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.wrapper}>\r\n      <Box className={classes.component}>\r\n        {messages &&\r\n          messages.map((message) => (\r\n            <Box className={classes.container}>\r\n              <Message message={message} />\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n      <Footer sendText={sendText} setValue={setValue} value={value} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}